import mongoose from 'mongoose';

declare global {
  var mongoose: {
    conn: typeof mongoose | null;
    promise: Promise<typeof mongoose> | null;
  } | undefined;
}

const MONGODB_URI = process.env.MONGODB_URI || 'mongodb://floweradmin:flowerpassword@mongodb:27017/flowerdb?authSource=admin';

// –ö—ç—à–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω–æ
let cached = global.mongoose;

if (!cached) {
  cached = global.mongoose = { conn: null, promise: null };
}

const connectToDatabase = async (): Promise<typeof mongoose> => {
  if (cached!.conn) {
    console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
    return cached!.conn;
  }

  if (!cached!.promise) {
    const options = {
      bufferCommands: false,
      serverSelectionTimeoutMS: 10000,
      connectTimeoutMS: 10000,
      socketTimeoutMS: 45000,
    };

    console.log('üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB...');
    
    cached!.promise = mongoose.connect(MONGODB_URI, options)
      .then((mongooseInstance) => {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–∏–ª–∏—Å—å –∫ MongoDB');
        return mongooseInstance;
      })
      .catch((error) => {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', error.message);
        cached!.promise = null;
        throw error;
      });
  }

  try {
    cached!.conn = await cached!.promise;
    return cached!.conn;
  } catch (error) {
    cached!.promise = null;
    throw error;
  }
};

export default connectToDatabase;
