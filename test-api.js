/**
 * –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω–∞ Floramix.
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * 1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω (`npm run dev`).
 * 2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞: `node test-api.js`
 * 
 * –°–∫—Ä–∏–ø—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã:
 * - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞.
 * - –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤.
 * - –ü–æ–ª–Ω—ã–π CRUD-—Ü–∏–∫–ª –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π, –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–æ–≤–∞—Ä–æ–≤.
 * - –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.
 * - –ü–æ–ª–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.
 * - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.
 */

const BASE_URL = 'http://localhost:3000/api';

// --- –£—Ç–∏–ª–∏—Ç—ã ---
const COLORS = {
  reset: "\x1b[0m",
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  magenta: "\x1b[35m",
};

const log = (message, color = COLORS.reset) => console.log(color, message, COLORS.reset);

async function makeRequest(url, options = {}) {
  try {
    const response = await fetch(url, {
      ...options,
      headers: {
        'Content-Type': 'application/json',
        ...options.headers,
      },
    });

    const data = await response.json().catch(() => ({})); // Handle empty responses
    const success = response.ok;
    
    return { success, data, status: response.status };
  } catch (error) {
    return { success: false, data: { error: error.message }, status: 0 };
  }
}

// --- –¢–µ—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

async function testAuth() {
  log('\nüîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
  const res = await makeRequest(`${BASE_URL}/auth/login`, {
    method: 'POST',
    body: JSON.stringify({ username: 'admin', password: 'admin123' }),
  });

  const token = res.data?.token;
  if (token) {
    log(`   –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ‚úÖ`, COLORS.green);
  } else {
    log(`   –í—Ö–æ–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: ‚ùå`, COLORS.red);
    log(`   –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${res.status}`, COLORS.yellow);
    log(`   –¢–µ–ª–æ –æ—Ç–≤–µ—Ç–∞: ${JSON.stringify(res.data)}`, COLORS.yellow);
  }
  return token;
}

async function testPublicEndpoints() {
    log('\nüåç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É–±–ª–∏—á–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤...');
    const endpoints = ['/products', '/categories', '/settings'];
    for (const endpoint of endpoints) {
        const res = await makeRequest(`${BASE_URL}${endpoint}`);
        if (res.success) {
            log(`   GET ${endpoint}: ‚úÖ`, COLORS.green);
        } else {
            log(`   GET ${endpoint}: ‚ùå`, COLORS.red);
            log(`     Response: ${res.status} ${JSON.stringify(res.data)}`, COLORS.yellow);
        }
    }
}

async function testCategories(token) {
  log('\nüóÇÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
  const headers = { 'Authorization': `Bearer ${token}` };
  const categoryName = `–¢–µ—Å—Ç–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è ${Date.now()}`;

  // POST
  const postRes = await makeRequest(`${BASE_URL}/categories`, {
    method: 'POST',
    headers,
    body: JSON.stringify({ name: categoryName }),
  });
  if (postRes.success) {
      log(`   POST /categories: ‚úÖ`, COLORS.green);
  } else {
      log(`   POST /categories: ‚ùå`, COLORS.red);
      log(`     Response: ${postRes.status} ${JSON.stringify(postRes.data)}`, COLORS.yellow);
  }
  const categoryId = postRes.data?._id;

  if (!categoryId) return null;

  // GET
  const getRes = await makeRequest(`${BASE_URL}/categories/${categoryId}`, { headers });
  if (getRes.success) {
    log(`   GET /categories/[id]: ‚úÖ`, COLORS.green);
  } else {
    log(`   GET /categories/[id]: ‚ùå`, COLORS.red);
    log(`     Response: ${getRes.status} ${JSON.stringify(getRes.data)}`, COLORS.yellow);
  }

  // PUT
  const putRes = await makeRequest(`${BASE_URL}/categories/${categoryId}`, {
    method: 'PUT',
    headers,
    body: JSON.stringify({ name: `${categoryName} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)` }),
  });
  if (putRes.success) {
    log(`   PUT /categories/[id]: ‚úÖ`, COLORS.green);
  } else {
    log(`   PUT /categories/[id]: ‚ùå`, COLORS.red);
    log(`     Response: ${putRes.status} ${JSON.stringify(putRes.data)}`, COLORS.yellow);
  }
  
  return categoryId;
}

async function testSubcategories(token, categoryId) {
    if (!categoryId) {
        log('   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', COLORS.yellow);
        return null;
    }
    log('\nüìë –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const headers = { 'Authorization': `Bearer ${token}` };
    const subcategoryName = `–¢–µ—Å—Ç–æ–≤–∞—è –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏—è ${Date.now()}`;

    // POST
    const postRes = await makeRequest(`${BASE_URL}/subcategories`, {
        method: 'POST',
        headers,
        body: JSON.stringify({ name: subcategoryName, categoryId }),
    });
    if (postRes.success) {
        log(`   POST /subcategories: ‚úÖ`, COLORS.green);
    } else {
        log(`   POST /subcategories: ‚ùå`, COLORS.red);
        log(`     Response: ${postRes.status} ${JSON.stringify(postRes.data)}`, COLORS.yellow);
    }
    const subcategoryId = postRes.data?._id;

    if (!subcategoryId) return null;

    // GET
    const getRes = await makeRequest(`${BASE_URL}/subcategories/${subcategoryId}`, { headers });
     if (getRes.success) {
        log(`   GET /subcategories/[id]: ‚úÖ`, COLORS.green);
    } else {
        log(`   GET /subcategories/[id]: ‚ùå`, COLORS.red);
        log(`     Response: ${getRes.status} ${JSON.stringify(getRes.data)}`, COLORS.yellow);
    }


    // PUT
    const putRes = await makeRequest(`${BASE_URL}/subcategories/${subcategoryId}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify({ name: `${subcategoryName} (–æ–±–Ω–æ–≤–ª–µ–Ω–æ)` }),
    });
    if (putRes.success) {
        log(`   PUT /subcategories/[id]: ‚úÖ`, COLORS.green);
    } else {
        log(`   PUT /subcategories/[id]: ‚ùå`, COLORS.red);
        log(`     Response: ${putRes.status} ${JSON.stringify(putRes.data)}`, COLORS.yellow);
    }

    return subcategoryId;
}


async function testProducts(token, categoryId, subcategoryId) {
    if (!categoryId) { // subcategoryId –º–æ–∂–µ—Ç –±—ã—Ç—å null
        log('   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.', COLORS.yellow);
        return null;
    }
    log('\nüå∑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤...');
    const headers = { 'Authorization': `Bearer ${token}` };
    const productName = `–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç ${Date.now()}`;

    // POST
    const productData = {
        name: productName,
        price: 100,
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        categoryId,
        inStock: true,
        image: '/uploads/placeholder.jpg' // –î–æ–±–∞–≤–ª–µ–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ
    };
    if (subcategoryId) {
        productData.subcategoryId = subcategoryId;
    }

    const postRes = await makeRequest(`${BASE_URL}/products`, {
        method: 'POST',
        headers,
        body: JSON.stringify(productData),
    });
    if (postRes.success) {
        log(`   POST /products: ‚úÖ`, COLORS.green);
    } else {
        log(`   POST /products: ‚ùå`, COLORS.red);
        log(`     Response: ${postRes.status} ${JSON.stringify(postRes.data)}`, COLORS.yellow);
    }
    const productId = postRes.data?._id;

    if (!productId) return null;

    // GET by ID
    const getRes = await makeRequest(`${BASE_URL}/products/${productId}`, { headers });
    if (getRes.success) {
        log(`   GET /products/[id]: ‚úÖ`, COLORS.green);
    } else {
        log(`   GET /products/[id]: ‚ùå`, COLORS.red);
        log(`     Response: ${getRes.status} ${JSON.stringify(getRes.data)}`, COLORS.yellow);
    }

    // PUT
    const putRes = await makeRequest(`${BASE_URL}/products/${productId}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify({ price: 200 }),
    });
     if (putRes.success) {
        log(`   PUT /products/[id]: ‚úÖ`, COLORS.green);
    } else {
        log(`   PUT /products/[id]: ‚ùå`, COLORS.red);
        log(`     Response: ${putRes.status} ${JSON.stringify(putRes.data)}`, COLORS.yellow);
    }

    return productId;
}

async function testOrders(token, productId) {
    if (!productId) {
        log('   –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω–æ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç.', COLORS.yellow);
        return;
    }
    log('\nüõí –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–æ–≤...');
    const headers = { 'Authorization': `Bearer ${token}` };

    // POST (public)
    const postRes = await makeRequest(`${BASE_URL}/orders`, {
        method: 'POST',
        body: JSON.stringify({
            customer: { 
                name: '–¢–µ—Å—Ç–æ–≤—ã–π –ü–æ–∫—É–ø–∞—Ç–µ–ª—å', 
                phone: '+79998887766',
                email: 'test@test.com',
                address: '–¢–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å'
            },
            items: [{ productId, quantity: 1, price: 200, name: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç', image: '/placeholder.jpg' }],
            totalAmount: 200,
            paymentMethod: 'cash'
        }),
    });
    if (postRes.success) {
        log(`   POST /orders: ‚úÖ`, COLORS.green);
    } else {
        log(`   POST /orders: ‚ùå`, COLORS.red);
        log(`     Response: ${postRes.status} ${JSON.stringify(postRes.data)}`, COLORS.yellow);
    }
    const orderId = postRes.data?._id;
    
    if (!orderId) return;

    // GET All (private)
    const getRes = await makeRequest(`${BASE_URL}/orders`, { headers });
    if (getRes.success) {
        log(`   GET /orders (all): ‚úÖ`, COLORS.green);
    } else {
        log(`   GET /orders (all): ‚ùå`, COLORS.red);
        log(`     Response: ${getRes.status} ${JSON.stringify(getRes.data)}`, COLORS.yellow);
    }
    
    // PUT (private)
    const putRes = await makeRequest(`${BASE_URL}/orders/${orderId}`, {
        method: 'PUT',
        headers,
        body: JSON.stringify({ status: 'completed' }),
    });
    if (putRes.success) {
        log(`   PUT /orders?id=...: ‚úÖ`, COLORS.green);
    } else {
        log(`   PUT /orders?id=...: ‚ùå`, COLORS.red);
        log(`     Response: ${putRes.status} ${JSON.stringify(putRes.data)}`, COLORS.yellow);
    }
}

async function testSettings(token) {
    log('\n‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...');
    const headers = { 'Authorization': `Bearer ${token}` };
    const settingsData = {
        siteName: '–ù–æ–≤–æ–µ –∏–º—è —Å–∞–π—Ç–∞',
        contactPhone: '+71112223344',
        address: '–ù–æ–≤—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π –∞–¥—Ä–µ—Å',
        workingHours: '24/7'
    };
    const putRes = await makeRequest(`${BASE_URL}/settings`, {
        method: 'PUT',
        headers,
        body: JSON.stringify(settingsData),
    });
    if (putRes.success) {
        log(`   PUT /settings: ‚úÖ`, COLORS.green);
    } else {
        log(`   PUT /settings: ‚ùå`, COLORS.red);
        log(`     Response: ${putRes.status} ${JSON.stringify(putRes.data)}`, COLORS.yellow);
    }
}


async function testCleanup(token, ids) {
    log('\nüßπ –û—á–∏—Å—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...');
    const headers = { 'Authorization': `Bearer ${token}` };

    const deleteIfExists = async (type, id) => {
        if (id) {
            const res = await makeRequest(`${BASE_URL}/${type}/${id}`, { method: 'DELETE', headers });
            if (res.success) {
                log(`   DELETE /${type}/[id]: ‚úÖ`, COLORS.green);
            } else {
                log(`   DELETE /${type}/[id]: ‚ùå`, COLORS.red);
                log(`     Response: ${res.status} ${JSON.stringify(res.data)}`, COLORS.yellow);
            }
        }
    };
    
    await deleteIfExists('products', ids.productId);
    await deleteIfExists('subcategories', ids.subcategoryId);
    await deleteIfExists('categories', ids.categoryId);
}

async function testLogout(token) {
    log('\nüö™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—Ö–æ–¥–∞...');
    const res = await makeRequest(`${BASE_URL}/auth/logout`, {
        method: 'POST',
        headers: { 'Authorization': `Bearer ${token}` }
    });
    log(`   POST /auth/logout: ${res.success ? '‚úÖ' : '‚ùå'}`, res.success ? COLORS.green : COLORS.red);
}

// --- –û—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç ---
async function runTests() {
  log('üöÄ –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API...', COLORS.magenta);
  
  const token = await testAuth();
  if (!token) {
    log('\n–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ–≤–∞–ª–µ–Ω–∞. –î–∞–ª—å–Ω–µ–π—à–∏–µ —Ç–µ—Å—Ç—ã –Ω–µ–≤–æ–∑–º–æ–∂–Ω—ã.', COLORS.red);
    return;
  }
  
  await testPublicEndpoints();

  const categoryId = await testCategories(token);
  const subcategoryId = await testSubcategories(token, categoryId);
  const productId = await testProducts(token, categoryId, subcategoryId);

  await testOrders(token, productId);
  await testSettings(token);
  
  await testCleanup(token, { productId, subcategoryId, categoryId });

  await testLogout(token);

  log('\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.', COLORS.magenta);
}

runTests(); 